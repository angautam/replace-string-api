on:
  push:
    branches:
      - main

jobs:
  terraform:
    name: 'Deployment CICD'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      # checkout the code.
    - name: Checkout
      uses: actions/checkout@v3

      # set the environment for build release
    - name: Assign release version from version.txt to Env variable
      working-directory: .
      run: |
        BUILD_VERSION=$(cat package.json | jq -r '.version')-"$(git rev-parse --short=7 HEAD)"
        echo "BUILD_VERSION=$BUILD_VERSION" >> $GITHUB_ENV

      # configure AWS credentials
    - name: configure aws credentials
      uses: aws-actions/configure-aws-credentials@v1-node16
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        role-session-name: githubactionsession
        aws-region: us-east-1

      # Login to ECR Repository
    - name: Login to Amazon ECR
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
     
      # Build and push docker image to ECR
    - name: Build, tag, and push image to Amazon ECR
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: string-tmml-api
        IMAGE_TAG: ${{ env.BUILD_VERSION }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        
    #prepare the Terraform.
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
    
    #format the terraform code before deploying
    - name: Terraform Format
      id: fmt
      run: |
        sed -i "s/IMAGE_TAG/${{ env.BUILD_VERSION }}/g" infra/terraform/modules/helmdeploy/string-tmnl/values.yaml
        sed -i "s/APP_VERSION/${{ env.BUILD_VERSION }}/g" infra/terraform/modules/helmdeploy/string-tmnl/Chart.yaml
        sed -i "s/IMAGE_TAG/${{ env.BUILD_VERSION }}/g" infra/terraform/main.tf
        terraform -chdir=infra/terraform fmt -check

    # Does an initialization of Terraform
    - name: Terraform Init
      id: init
      run: terraform -chdir=infra/terraform init

    # Does the validation of Terraform code
    - name: Terraform Validate
      id: validate
      run: terraform -chdir=infra/terraform validate -no-color
    
    # dry run with TF plan
    - name: Terraform Plan
      id: plan
      if: github.event_name == 'pull_request'
      run: terraform -chdir=infra/terraform plan -no-color
      continue-on-error: true
      
    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1
    
    # This is a final deployment with auto approve
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform -chdir=infra/terraform apply -auto-approve